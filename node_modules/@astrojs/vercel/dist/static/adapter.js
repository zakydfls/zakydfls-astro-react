import {
  defaultImageConfig,
  getImageConfig,
  throwIfAssetsNotEnabled
} from "../image/shared.js";
import { exposeEnv } from "../lib/env.js";
import { emptyDir, getVercelOutput, writeJson } from "../lib/fs.js";
import { isServerLikeOutput } from "../lib/prerender.js";
import { getRedirects } from "../lib/redirects.js";
const PACKAGE_NAME = "@astrojs/vercel/static";
function getAdapter() {
  return { name: PACKAGE_NAME };
}
function vercelStatic({
  analytics,
  imageService,
  imagesConfig
} = {}) {
  let _config;
  return {
    name: "@astrojs/vercel",
    hooks: {
      "astro:config:setup": ({ command, config, injectScript, updateConfig }) => {
        if (command === "build" && analytics) {
          injectScript("page", 'import "@astrojs/vercel/analytics"');
        }
        const outDir = new URL("./static/", getVercelOutput(config.root));
        const viteDefine = exposeEnv(["VERCEL_ANALYTICS_ID"]);
        updateConfig({
          outDir,
          build: {
            format: "directory",
            redirects: false
          },
          vite: {
            define: viteDefine
          },
          ...getImageConfig(imageService, imagesConfig, command)
        });
      },
      "astro:config:done": ({ setAdapter, config }) => {
        throwIfAssetsNotEnabled(config, imageService);
        setAdapter(getAdapter());
        _config = config;
        if (isServerLikeOutput(config)) {
          throw new Error(`${PACKAGE_NAME} should be used with output: 'static'`);
        }
      },
      "astro:build:start": async () => {
        await emptyDir(getVercelOutput(_config.root));
      },
      "astro:build:done": async ({ routes }) => {
        await writeJson(new URL(`./config.json`, getVercelOutput(_config.root)), {
          version: 3,
          routes: [...getRedirects(routes, _config), { handle: "filesystem" }],
          ...imageService || imagesConfig ? { images: imagesConfig ? imagesConfig : defaultImageConfig } : {}
        });
      }
    }
  };
}
export {
  vercelStatic as default
};
