import esbuild from "esbuild";
import { relative as relativePath } from "node:path";
import { fileURLToPath } from "node:url";
import {
  defaultImageConfig,
  getImageConfig,
  throwIfAssetsNotEnabled
} from "../image/shared.js";
import { exposeEnv } from "../lib/env.js";
import {
  copyFilesToFunction,
  getFilesFromFolder,
  getVercelOutput,
  removeDir,
  writeJson
} from "../lib/fs.js";
import { getRedirects } from "../lib/redirects.js";
const PACKAGE_NAME = "@astrojs/vercel/edge";
function getAdapter() {
  return {
    name: PACKAGE_NAME,
    serverEntrypoint: `${PACKAGE_NAME}/entrypoint`,
    exports: ["default"]
  };
}
function vercelEdge({
  includeFiles = [],
  analytics,
  imageService,
  imagesConfig
} = {}) {
  let _config;
  let buildTempFolder;
  let functionFolder;
  let serverEntry;
  return {
    name: PACKAGE_NAME,
    hooks: {
      "astro:config:setup": ({ command, config, updateConfig, injectScript }) => {
        if (command === "build" && analytics) {
          injectScript("page", 'import "@astrojs/vercel/analytics"');
        }
        const outDir = getVercelOutput(config.root);
        const viteDefine = exposeEnv(["VERCEL_ANALYTICS_ID"]);
        updateConfig({
          outDir,
          build: {
            serverEntry: "entry.mjs",
            client: new URL("./static/", outDir),
            server: new URL("./dist/", config.root)
          },
          vite: {
            define: viteDefine,
            ssr: {
              external: ["@vercel/nft"]
            }
          },
          ...getImageConfig(imageService, imagesConfig, command)
        });
      },
      "astro:config:done": ({ setAdapter, config }) => {
        throwIfAssetsNotEnabled(config, imageService);
        setAdapter(getAdapter());
        _config = config;
        buildTempFolder = config.build.server;
        functionFolder = new URL("./functions/render.func/", config.outDir);
        serverEntry = config.build.serverEntry;
        if (config.output === "static") {
          throw new Error(`
		[@astrojs/vercel] \`output: "server"\` or \`output: "hybrid"\` is required to use the edge adapter.

	`);
        }
      },
      "astro:build:setup": ({ vite, target }) => {
        if (target === "server") {
          vite.resolve ||= {};
          vite.resolve.alias ||= {};
          const aliases = [{ find: "react-dom/server", replacement: "react-dom/server.browser" }];
          if (Array.isArray(vite.resolve.alias)) {
            vite.resolve.alias = [...vite.resolve.alias, ...aliases];
          } else {
            for (const alias of aliases) {
              vite.resolve.alias[alias.find] = alias.replacement;
            }
          }
          vite.ssr ||= {};
          vite.ssr.target = "webworker";
          vite.define = {
            "process.env": "process.env",
            ...vite.define
          };
        }
      },
      "astro:build:done": async ({ routes }) => {
        const entry = new URL(serverEntry, buildTempFolder);
        const generatedFiles = await getFilesFromFolder(buildTempFolder);
        const entryPath = fileURLToPath(entry);
        await esbuild.build({
          target: "es2020",
          platform: "browser",
          // https://runtime-keys.proposal.wintercg.org/#edge-light
          conditions: ["edge-light", "worker", "browser"],
          entryPoints: [entryPath],
          outfile: entryPath,
          allowOverwrite: true,
          format: "esm",
          bundle: true,
          minify: true
        });
        const commonAncestor = await copyFilesToFunction(
          [...generatedFiles, ...includeFiles.map((file) => new URL(file, _config.root))],
          functionFolder
        );
        await removeDir(buildTempFolder);
        await writeJson(new URL(`./.vc-config.json`, functionFolder), {
          runtime: "edge",
          entrypoint: relativePath(commonAncestor, entryPath)
        });
        await writeJson(new URL(`./config.json`, _config.outDir), {
          version: 3,
          routes: [
            ...getRedirects(routes, _config),
            { handle: "filesystem" },
            { src: "/.*", dest: "render" }
          ],
          ...imageService || imagesConfig ? { images: imagesConfig ? imagesConfig : defaultImageConfig } : {}
        });
      }
    }
  };
}
export {
  vercelEdge as default
};
