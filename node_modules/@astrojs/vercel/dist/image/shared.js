const defaultImageConfig = {
  sizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  domains: []
};
function isESMImportedImage(src) {
  return typeof src === "object";
}
const qualityTable = {
  low: 25,
  mid: 50,
  high: 80,
  max: 100
};
function throwIfAssetsNotEnabled(config, imageService) {
  if (!config.experimental.assets && imageService) {
    throw new Error(
      `Using the Vercel Image Optimization-powered image service requires \`experimental.assets\` to be enabled. See https://docs.astro.build/en/guides/assets/ for more information.`
    );
  }
}
function getImageConfig(images, imagesConfig, command) {
  if (images) {
    return {
      image: {
        service: {
          entrypoint: command === "dev" ? "@astrojs/vercel/dev-image-service" : "@astrojs/vercel/build-image-service",
          config: imagesConfig ? imagesConfig : defaultImageConfig
        }
      }
    };
  }
  return {};
}
function sharedValidateOptions(options, serviceOptions, mode) {
  const vercelImageOptions = serviceOptions;
  if (mode === "development" && (!vercelImageOptions.sizes || vercelImageOptions.sizes.length === 0)) {
    throw new Error("Vercel Image Optimization requires at least one size to be configured.");
  }
  const configuredWidths = vercelImageOptions.sizes.sort((a, b) => a - b);
  if (!options.width) {
    const src = options.src;
    if (isESMImportedImage(src)) {
      const nearestWidth = configuredWidths.reduce((prev, curr) => {
        return Math.abs(curr - src.width) < Math.abs(prev - src.width) ? curr : prev;
      });
      options.inputtedWidth = src.width;
      options.width = nearestWidth;
    } else {
      throw new Error(`Missing \`width\` parameter for remote image ${options.src}`);
    }
  } else {
    if (!configuredWidths.includes(options.width)) {
      const nearestWidth = configuredWidths.reduce((prev, curr) => {
        return Math.abs(curr - options.width) < Math.abs(prev - options.width) ? curr : prev;
      });
      options.inputtedWidth = options.width;
      options.width = nearestWidth;
    }
  }
  if (options.quality && typeof options.quality === "string") {
    options.quality = options.quality in qualityTable ? qualityTable[options.quality] : void 0;
  }
  if (!options.quality) {
    options.quality = 100;
  }
  return options;
}
export {
  defaultImageConfig,
  getImageConfig,
  isESMImportedImage,
  qualityTable,
  sharedValidateOptions,
  throwIfAssetsNotEnabled
};
